<%
    const packageBaseDir = extension('pom-group-id')[0].replace(/\./, '/') + '/' +
            lodash.kebabCase(extension('pom-artifact-id')[0]).replace(/-/, '/');
    let context = {
        packageBaseDir : packageBaseDir,
        packageTubeBaseDir: packageBaseDir + "/tubes",
        packageCellBaseDir: packageBaseDir + "/cells",
        packageDesignBaseDir: packageBaseDir + "/designs",
        packageFlowBaseDir: packageBaseDir + "/flows"
    };

    Object.assign(context, {
        packageName: context.packageBaseDir.replace(/\//g, '.'),
        packageTubeName: context.packageTubeBaseDir.replace(/\//g, '.'),
        packageCellName: context.packageCellBaseDir.replace(/\//g, '.'),
        packageDesignName: context.packageDesignBaseDir.replace(/\//g, '.'),
        packageFlowName: context.packageFlowBaseDir.replace(/\//g, '.')
    });
%>
{
    ".settings/org.eclipse.jdt.core.prefs": {
        "template": ".settings/org.eclipse.jdt.core.prefs._"
    },
    ".settings/org.eclipse.m2e.core.prefs": {
        "template": ".settings/org.eclipse.m2e.core.prefs._"
    },
    "src/main/java/.gitkeep": {
        "template": "src/main/java/.gitkeep._"
    },
    "src/main/resources/.gitkeep": {
        "template": "src/main/resources/.gitkeep._"
    },
    "src/test/java/.gitkeep": {
        "template": "src/test/java/.gitkeep._"
    },
    "src/test/resources/.gitkeep": {
        "template": "src/test/resources/.gitkeep._"
    },
<%
    {
        const className = lodash.upperFirst(lodash.camelCase(design.MasterDesign[0].name));
%>
    "src/main/java/<%=context.packageDesignBaseDir%>/<%=className%>.java" : {
        "template": "src/main/java/master-design-class.java._",
        "context" : <%=JSON.stringify(Object.assign({}, context, {
            className : className
        }))%>
    },
<%
    }
%>
<%
    _.each(design.Flow, (flow, key) => {
        const className = lodash.upperFirst(lodash.camelCase(flow.name));
%>
    "src/main/java/<%=context.packageFlowBaseDir%>/<%=className%>.java" : {
        "template": "src/main/java/master-flow-class.java._",
        "context" : <%=JSON.stringify(Object.assign({}, context, {
            className : className
        }))%>
    },
<%
    })
%>
<%
    _.each(design.MasterTube, (tube, key) => {
        const className = lodash.upperFirst(lodash.camelCase(tube.name));
%>
    "src/main/java/<%=context.packageTubeBaseDir%>/<%=className%>.java" : {
        "template": "src/main/java/master-tube-class.java._",
        "context" : <%=JSON.stringify(Object.assign({}, context, {
            className : className,
            key: key
        }))%>
    },
<%
    })
%>
<%
    _.each(design.MasterCell, (cell, key) => {
        const className = lodash.upperFirst(lodash.camelCase(cell.name));
%>
    "src/test/java/<%=context.packageCellBaseDir%>/<%=className%>Test.java" : {
        "template": "src/test/java/master-cell-test.java._",
        "context" : <%=JSON.stringify(Object.assign({}, context, {
            className : className,
            key: key
        }))%>
    },
    "src/main/java/<%=context.packageCellBaseDir%>/<%=className%>.java" : {
        "template": "src/main/java/master-cell-class.java._",
        "context" : <%=JSON.stringify(Object.assign({}, context, {
            className : className,
            key: key
        }))%>
    },
<%
    })
%>
    "src/main/java/<%=context.packageFlowBaseDir%>/Enum.java" : {
        "template": "src/main/java/master-flow-enum.java._",
        "context" : <%=JSON.stringify(context)%>
    },
    ".classpath": {
        "template": ".classpath._"
    },
    ".project": {
        "template": ".project._"
    },
    "pom.xml": {
        "template": "pom.xml._"
    },
    ".gitignore": {
        "template": ".gitignore._"
    },
    "Jenkinsfile": {
        "template": "Jenkinsfile._"
    },
    "settings.xml": {
        "template": "settings.xml._"
    },
    "maven.pem": {
        "template": "maven.pem._"
    }
}