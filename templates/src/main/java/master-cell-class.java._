package <%=context.packageCellName%>;
<%
    const cell = design.MasterCell[context.key];
%>
import reactor.core.publisher.Flux;
<%_.each(_.union(cell.input, cell.output), port => {
    const portName = lodash.upperFirst(lodash.camelCase(port.name));
%>
import <%=context.packageTubeName%>.<%=portName%>;
<%});%>

public class <%=context.className%> {

    public <%=context.className%>(
<%=_.map(cell.input, input => {
    const inputName = lodash.upperFirst(lodash.camelCase(input.name));
    return '        Flux<' + inputName + '> inputTube' + inputName;
}).join(',\n')%>
    ) {

<%_.each(cell.output, output => {
    const outputName = lodash.upperFirst(lodash.camelCase(output.name));
%>
        this.tube<%=outputName%> = Flux.just(new <%=outputName%>());
<%});%>
    }

<%_.each(cell.output, output => {
    const outputName = lodash.upperFirst(lodash.camelCase(output.name));
%>
    private Flux<<%=outputName%>> tube<%=outputName%>;
    public Flux<<%=outputName%>> getTube<%=outputName%>() {
        return this.tube<%=outputName%>;
    }
<%});%>
}