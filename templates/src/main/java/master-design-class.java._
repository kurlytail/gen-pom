package <%=context.packageDesignName%>;
<%
    const designInputs = _.filter(design.MasterTube, tube => tube.from.external);
    const designOutputs = _.filter(design.MasterTube, tube => tube.to.external);
    const designCells = _.filter(design.MasterCell, cell => !cell.external);
%>

import reactor.core.publisher.DirectProcessor;
import reactor.core.publisher.Flux;
<%_.each(_.union(designInputs, designOutputs), port => {
    const portName = lodash.upperFirst(lodash.camelCase(port.name));
%>
import <%=context.packageTubeName%>.<%=portName%>;
<%});%>
<%_.each(designCells, cell => {
    const cellName = lodash.upperFirst(lodash.camelCase(cell.name));
%>
import <%=context.packageCellName%>.<%=cellName%>;
<%});%>

public class <%=context.className%> {

<%_.each(designCells, cell => {
    const cellName = lodash.upperFirst(lodash.camelCase(cell.name));
%>
    private <%=cellName%> cell<%=cellName%> = new <%=cellName%>();
<%});%>

<%_.each(designInputs, input => {
    const inputName = lodash.upperFirst(lodash.camelCase(input.name));
    const cellName = lodash.upperFirst(lodash.camelCase(input.to.name))
%>
    private Flux<<%=inputName%>> input<%=inputName%> = Flux.empty();
    public void setInputTube<%=inputName%>(Flux<<%=inputName%>> input) {
        this.input<%=inputName%> = input;
    }
<%});%>

    public void wireCells() {
<%
const outputsToSubsribe = [];
let inputsAvailable = _.pluck(designInputs, 'name');
_.each(designCells, cell => {
    const cellName = lodash.upperFirst(lodash.camelCase(cell.name));
    const cellInputs = _.pluck(cell.input, 'name');
    const cellOutputs = _.pluck(cell.output, 'name')
    const directInputs = _.difference(cellInputs, inputsAvailable);

    _.each(directInputs, input => {
        const inputName = lodash.upperFirst(lodash.camelCase(input));
 %>
        DirectProcessor<<%=inputName%>> processor<%=inputName%> = DirectProcessor.create();
        Flux<<%=inputName%> input<%=inputName%> = processor<%=inputName%>.publish();
 <%
    });
    _.each(cellInputs, input => {
        const inputName = lodash.upperFirst(lodash.camelCase(input));
 %>
        this.cell<%=cellName%>.setTube<%=inputName%>(input<%=inputName%>);
 <%
    });
%>
        this.cell<%=cellName%>.wireTubes();
<%
    const internalInputs = _.difference(cellOutputs, _.pluck(designOutputs, 'name'));
    inputsAvailable = [...inputsAvailable, ...internalInputs];
   _.each(internalInputs, input => {
        const inputName = lodash.upperFirst(lodash.camelCase(input));
 %>
        Flux<<%=inputName%> input<%=inputName%> = this.cell<%=cellName%>.getTube<%=inputName%>();
 <%
    });
});%>
    }

<%_.each(designOutputs, output => {
    const outputName = lodash.upperFirst(lodash.camelCase(output.name));
    const cellName = lodash.upperFirst(lodash.camelCase(output.from.name))
%>
    public Flux<<%=outputName%>> getOutputTube<%=outputName%>() {
        return this.cell<%=cellName%>.getTube<%=outputName%>();
    }
<%});%>

}