package <%=context.packageDesignName%>;
<%
    const designInputs = _.filter(design.MasterTube, tube => tube.from.external);
    const designOutputs = _.filter(design.MasterTube, tube => tube.to.external);
    const designCells = _.filter(design.MasterCell, cell => !cell.external);
%>

import reactor.core.publisher.Flux;
<%_.each(_.union(designInputs, designOutputs), port => {
    const portName = lodash.upperFirst(lodash.camelCase(port.name));
%>
import <%=context.packageTubeName%>.<%=portName%>;
<%});%>
<%_.each(designCells, cell => {
    const cellName = lodash.upperFirst(lodash.camelCase(cell.name));
%>
import <%=context.packageCellName%>.<%=cellName%>;
<%});%>

public class <%=context.className%> {

<%_.each(designCells, cell => {
    const cellName = lodash.upperFirst(lodash.camelCase(cell.name));
%>
    private <%=cellName%> cell<%=cellName%> = new <%=cellName%>();
<%});%>

<%_.each(designInputs, input => {
    const inputName = lodash.upperFirst(lodash.camelCase(input.name));
    const cellName = lodash.upperFirst(lodash.camelCase(input.to.name))
%>
    public void setInputTube<%=inputName%>(Flux<<%=inputName%>> input) {
        this.cell<%=cellName%>.setTube<%=inputName%>(input);
    }
<%});%>

    public void wireCells() {
<%_.each(designCells, cell => {
    const cellName = lodash.upperFirst(lodash.camelCase(cell.name));
%>
        this.cell<%=cellName%>.wireTubes();
<%});%>
    }

<%_.each(designOutputs, output => {
    const outputName = lodash.upperFirst(lodash.camelCase(output.name));
    const cellName = lodash.upperFirst(lodash.camelCase(output.from.name))
%>
    public Flux<<%=outputName%>> getOutputTube<%=outputName%>() {
        return this.cell<%=cellName%>.getTube<%=outputName%>();
    }
<%});%>

}