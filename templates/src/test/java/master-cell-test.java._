package <%=context.packageCellName%>;
<%
    const cells = design.MasterCell[context.key].designCells;
%>

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;

import reactor.core.publisher.Flux;

<%_.each(_.union(_.flatten(_.pluck(cells, 'input')), _.flatten(_.pluck(cells, 'output'))), port => {
    const portName = lodash.upperFirst(lodash.camelCase(port.name));
%>
import <%=context.packageTubeName%>.<%=portName%>;
<%});%>

import reactor.core.publisher.Flux;

class <%=context.className%>Test {
<%_.each(_.filter(cells, cell => !cell.external), cell => {
    const flowClassName = lodash.upperFirst(lodash.camelCase(cell.Flow[0].name));
%>
    @Test
    void test<%=flowClassName%>() throws Exception {

        <%=context.className%> cell<%=context.className%> = new <%=context.className%>(
<%=
    _.map(design.MasterCell[context.key].input, input => {
        const portName = lodash.upperFirst(lodash.camelCase(input.name));
        return 'Flux.just(new ' + portName + '())';
    }).join(',\n        ')
%>
        );

<%
    _.each(cell.output, output => {
        const portName = lodash.upperFirst(lodash.camelCase(output.name));
%>
        cell<%=context.className%>.getTube<%=portName%>().subscribe(element -> System.out.println(element));
<%
    })
%>
        fail("Not yet implemented");
    }
<%});%>
}